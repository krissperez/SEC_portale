{% extends 'base.html.twig' %}

{% block javascripts%}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js"></script>
{% endblock %}

{% block stylesheets %}
    <style>
        .btn-dropdown{
            color:white;
            background-color: #B51F27;
        }

        .btn-dropdown:hover{
            color:white;
            background-color: #a61a21;
        }

        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }

        .box-chart{
            background-color: #F2F2F2;
            border-radius: 1rem;
            padding: 2rem;
        }

        .box-chart:hover{
            background-color: #eeeeee;
            transition: background-color .3ms;
        }



    </style>


{% endblock %}

{% block body %}
    <div>
        <h2 class="mb-5 text-capitalize">Ripartizione dei clienti </h2>
        <div class="box-chart">
            <div id="chart-pie" >
            </div>
        </div>

    </div>


    <div id="chart-bar-container" class="mt-5">
        <h3 class="text-capitalize mb-5">Andamento delle Acquisizioni</h3>


        <div class="box-chart">
            <div class="row">
                <div class="row justify-content-end">
                    <div class="col-6 col-md-2 mb-5" id="select-time">
                        <label class="mb-1">Data</label>
                        <select class="form-select" aria-label="Filtrare per data">
                            <option selected></option>
                            <option value="1 MONTH">Ultimo mese</option>
                            <option value="3 MONTH">Ultimo trimestre</option>
                            <option value="6 MONTH">Ultimo semestre</option>
                            <option value="1 YEAR">Ultimo Anno</option>
                            <option value="3 YEAR">Ultimi 3 anni</option>

                        </select>
                    </div>

                    <div class="col-6 col-md-2 mb-5" id="select-agents">
                        <label class="mb-1">Agente</label>
                        <select class="form-select" aria-label="Filtrare per Agente">
                            <option selected></option>
                        </select>
                    </div>
                </div>
            </div>

            <div id="chart-bar" >

            </div>
        </div>

    </div>



    <script>
        $(function (){
            const chartPie = {
                init: () => {
                    chartPie.getClientDistribution()


                },
                getClientDistribution: async () => {
                    try {
                        const response = await  chartPie.handleGetClientDistribution();
                        chartPie.createChartPie(response.data)
                    }catch (e){
                        alert(e)
                    }

                },
                handleGetClientDistribution: () => {
                  return new Promise((resolve, reject) => {
                      $.ajax({
                          url: '/api/analisi/clienti-agenti',
                          type: 'GET',
                          dataType: 'json',
                          success: function(data) {
                              resolve(data)
                          },
                          error: function(error) {

                              reject(error)

                          }
                      });
                  })
                },
                formatClientColumn: (arr) => {
                    const result = [];

                    for(const [key, values] of Object.entries(arr)){
                        const percent = parseFloat(values['percent']).toFixed(2)
                        const nameSurnameConcat = `${values['nome']} - ${values['cognome']}`
                        result.push([nameSurnameConcat, percent])
                    }

                    return result;
                },
                createChartPie: (dataClient) => {

                    c3.generate({
                        bindto: '#chart-pie',
                        data: {
                            columns: chartPie.formatClientColumn(dataClient),
                            type: 'pie'
                        },
                        pie: {
                            label: {
                                format: function (value, ratio, id) {
                                    return d3.format("")(value) + '%';
                                }
                            }
                        }
                    });
                },

            }
            chartPie.init();

            const chartBar = {
                timeValue: null,
                agentValue: null,
                init: () => {

                    $("#select-time").on('change', function (e){
                        const target = $(e.target)
                        chartBar.timeValue = target.val();
                        chartBar.getClientsAcquired(chartBar.timeValue, chartBar.agentValue)
                    })

                    $("#select-agents").on('change', (e) => {
                        const target = $(e.target)
                        chartBar.agentValue = target.val()
                        chartBar.getClientsAcquired(chartBar.timeValue, chartBar.agentValue)

                    })
                    chartBar.populateAgentSelect();

                    chartBar.getClientsAcquired(chartBar.timeValue, chartBar.agentValue)

                },

                createBarChart: (data) => {
                   const statisticData = chartBar.formatDataForStatistics(data)
                    console.error(statisticData)
                    c3.generate({
                        bindto: '#chart-bar',
                        data: {
                            x: 'x',
                            columns: [
                                ['x', 'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
                                ...statisticData
                            ],
                            type: 'bar',
                        },
                        axis: {
                            x: {
                                type: 'category'
                            },

                            y: {
                                tick: {
                                    format: function (d){
                                        return d % 1 === 0 ? d : '';
                                    }
                                }
                            }
                        },
                        bar: {
                            width: {
                                ratio: 0.5
                            }
                        }
                    });


                },
                handleGetClientAcquiredByTime(time, id){

                    return new Promise((resolve, reject) => {
                        const baseUrl = '/api/analisi/clienti-acquisiti';
                        const timeEncoded = time ? encodeURI(time) : null
                        const idUrl = id ? id : null;
                        $.ajax({
                            url: `${baseUrl}?time=${timeEncoded}&agent-id=${idUrl}`,
                            type: 'GET',
                            dataType: 'json',
                            success: function(data) {
                                resolve(data)
                            },
                            error: function(error) {

                                reject(error)

                            }
                        });
                    })
                },
                getClientsAcquired: async (time, id) => {
                    try{
                        const response = await  chartBar.handleGetClientAcquiredByTime(time, id);
                        const data = response['data'];
                        chartBar.createBarChart(data);
                    }catch (error){
                        alert("error")
                    }
                },
                getArrByKeys: (key, arr) => {
                    return arr.filter(item => item[key] !== null).map(item => item[key])
                },
                formatDataForStatistics: (data = []) => {
                    let obj = {};

                    let mesi = {
                        'Gennaio': 1,
                        'Febbraio': 2,
                        'Marzo': 3,
                        'Aprile': 4,
                        'Maggio': 5,
                        'Giugno': 6,
                        'Luglio': 7,
                        'Agosto': 8,
                        'Settembre': 9,
                        'Ottobre': 10,
                        'Novembre': 11,
                        'Dicembre': 12
                    };

                    data.forEach((elem, i) => {
                        if(!obj[elem['anno']]){
                            obj[elem['anno']] = Array(13).fill(0)
                            obj[elem['anno']][0] = elem['anno']
                        }

                        const position = mesi[elem['mese']];
                        obj[elem['anno']][position] = elem['totale_acquisizione'];

                    })

                    const result = [];

                    for(let key in obj){
                        result.push(obj[key])
                    }

                    return result;
                },
                handleGetAgents: () => {
                   return new Promise((resolve, reject) => {
                       $.ajax({
                           url: "api/agents",
                           type: "GET",
                           dataType: "json",
                           success: function(response) {
                                resolve(response)
                           },
                           error: function(err) {
                                reject(err)
                           }
                       });
                   })
                },
                getAgents: async () => {
                    try{
                        const {data} = await chartBar.handleGetAgents();
                        return data;
                    }catch (err){
                        alert(err)
                    }
                },
                populateAgentSelect: async () => {
                    const agents = await chartBar.getAgents();
                    const select = $("#select-agents select")
                    if(!agents) return;
                    agents.forEach((agent) => {
                        const {id,nome, cognome} = agent;
                        select.append(`<option value="${id}">${nome} ${cognome}</option>`)
                    })
                }
            }

            chartBar.init();
        })
    </script>
{% endblock %}